# üìö MANUAL COMPLETO DE APIs - PROYECTO MERCADO BACKEND
# üöÄ URL Base: https://proyect-mercado-backend.fly.dev/api
# üîê Autenticaci√≥n: Bearer JWT Token en header Authorization

================================================================================
üëë ROLES DE USUARIO
================================================================================
‚Ä¢ comprador: Usuario que compra productos
‚Ä¢ vendedor: Usuario que vende productos (requiere conversi√≥n)
‚Ä¢ admin: Administrador del sistema
‚Ä¢ super_admin: Super administrador con todos los permisos

================================================================================
üîê AUTENTICACI√ìN (TODOS LOS ROLES)
================================================================================

1. POST /autenticacion/login
Descripci√≥n: Login de usuario, retorna JWT.
Body:
{
  "email": "usuario@correo.com",
  "password": "123456"
}
Respuesta:
{
  "token": "jwt_token",
  "usuario": {
    "usuario_id": "uuid",
    "email": "usuario@email.com",
    "nombre": "Juan",
    "apellido": "P√©rez",
    "numero_telefono": "123456789",
    "rol": "comprador",
    "esta_activo": true,
    "ultima_sesion_at": "2024-01-01T00:00:00Z",
    "creado_at": "2024-01-01T00:00:00Z"
  }
}

================================================================================
üë§ GESTI√ìN DE USUARIOS (TODOS LOS ROLES)
================================================================================

2. POST /usuarios/registro
Descripci√≥n: Registrar un nuevo usuario.
Body:
{
  "email": "usuario@correo.com",
  "password": "123456",
  "nombre": "Juan",
  "apellido": "P√©rez",
  "numero_telefono": "71234567",
  "rol": "comprador" // comprador, vendedor, admin, super_admin
}

3. GET /usuarios/perfil
Descripci√≥n: Obtener perfil del usuario autenticado.
Headers: Authorization: Bearer jwt_token

4. GET /usuarios/{usuario_id}
Descripci√≥n: Obtener usuario por ID (solo propio o admin).
Headers: Authorization: Bearer jwt_token

5. POST /usuarios/{usuario_id}/direcciones
Descripci√≥n: Crear direcci√≥n para usuario (solo propio o admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "etiqueta": "Casa",
  "calle_avenida": "Av. Principal 123",
  "ciudad": "Cochabamba",
  "departamento": "Cochabamba",
  "codigo_postal": "1234",
  "pais": "Bolivia",
  "latitud": -17.3895,
  "longitud": -66.1568,
  "es_predeterminada": true
}

6. GET /usuarios/{usuario_id}/direcciones
Descripci√≥n: Listar direcciones de usuario (solo propio o admin).
Headers: Authorization: Bearer jwt_token

================================================================================
üõí CONVERSI√ìN A VENDEDOR (NUEVA FUNCIONALIDAD)
================================================================================

7. POST /vendedores/convertir-usuario
Descripci√≥n: Convertir usuario normal en vendedor (NUEVA API).
Body:
{
  "usuario_id": "uuid_del_usuario",
  "numero_identificacion": "12345678", // CI, NIT, etc.
  "estado_onboarding": "pendiente", // opcional
  "zona_asignada_id": "uuid_zona" // opcional
}
Respuesta:
{
  "mensaje": "Usuario convertido a vendedor correctamente",
  "vendedor": { /* datos del vendedor */ },
  "usuario": { /* datos del usuario actualizado */ }
}

================================================================================
üè™ PANEL DEL VENDEDOR (NUEVAS APIS ESPEC√çFICAS)
================================================================================

8. GET /vendedores/{vendedor_id}/dashboard
Descripci√≥n: Obtener dashboard completo del vendedor con contadores (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "dashboard": {
    "total_productos": 25,
    "productos_activos": 20,
    "productos_sin_stock": 5,
    "total_pedidos": 150,
    "pedidos_pendientes": 8,
    "pedidos_confirmados": 12,
    "pedidos_en_preparacion": 5,
    "pedidos_en_ruta": 3,
    "pedidos_entregados": 120,
    "pedidos_cancelados": 2,
    "calificacion_promedio": 4.5,
    "total_resenas": 45,
    "resenas_pendientes": 3,
    "ventas_hoy": 2500.00,
    "ventas_semana": 15000.00,
    "ventas_mes": 65000.00,
    "mensajes_no_leidos": 7,
    "conversaciones_activas": 12
  }
}

9. GET /vendedores/{vendedor_id}/productos
Descripci√≥n: Listar productos espec√≠ficos del vendedor con filtros (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters:
?esta_activo=true&categoria_id=uuid&nombre=iphone&limit=20&offset=0
Respuesta:
{
  "productos": [/* productos del vendedor */],
  "total": 25
}

10. GET /vendedores/{vendedor_id}/pedidos
Descripci√≥n: Listar pedidos espec√≠ficos del vendedor con filtros (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters:
?estado=pendiente&fecha_desde=2024-01-01&fecha_hasta=2024-01-31&limit=20&offset=0
Respuesta:
{
  "pedidos": [/* pedidos del vendedor con detalles completos */],
  "total": 150
}

11. GET /vendedores/pedidos/{pedido_id}/chat
Descripci√≥n: Obtener chat espec√≠fico de un pedido (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters: ?vendedor_id=uuid
Respuesta:
{
  "chat": {
    "conversacion_id": "uuid",
    "participantes": [/* participantes */],
    "mensajes": [/* mensajes del chat */]
  }
}

================================================================================
üè™ GESTI√ìN DE VENDEDORES
================================================================================

12. POST /vendedores
Descripci√≥n: Registrar datos extra de vendedor (requiere rol vendedor).
Body:
{
  "vendedor_id": "uuid_del_usuario",
  "numero_identificacion": "12345678",
  "estado_onboarding": "pendiente",
  "latitud_actual": -16.4897,
  "longitud_actual": -68.1193,
  "zona_asignada_id": "uuid_zona"
}

13. GET /vendedores
Descripci√≥n: Listar todos los vendedores con datos de usuario.

14. GET /vendedores/{vendedor_id}
Descripci√≥n: Obtener vendedor espec√≠fico por ID.

15. GET /vendedores/{vendedor_id}/calificacion
Descripci√≥n: Obtener calificaci√≥n detallada de un vendedor.

16. POST /vendedores/ubicaciones
Descripci√≥n: Registrar ubicaci√≥n de vendedor (requiere JWT).
Headers: Authorization: Bearer jwt_token
Body:
{
  "vendedor_id": "uuid_del_vendedor",
  "latitud": -17.3895,
  "longitud": -66.1568,
  "precision_m": 5.0
}

17. GET /vendedores/{vendedor_id}/ubicaciones
Descripci√≥n: Listar ubicaciones hist√≥ricas de vendedor (requiere JWT).
Headers: Authorization: Bearer jwt_token

================================================================================
üì± UBICACI√ìN EN TIEMPO REAL (WebSocket)
================================================================================

URL: wss://proyect-mercado-backend.fly.dev

Evento para enviar ubicaci√≥n:
{
  "event": "ubicacion_actualizada",
  "data": {
    "vendedor_id": "uuid_del_vendedor",
    "latitud": -17.3895,
    "longitud": -66.1568,
    "precision_m": 5.0
  }
}

Evento recibido: Todos los clientes conectados reciben ubicacion_actualizada

================================================================================
üè∑Ô∏è CATEGOR√çAS DE PRODUCTOS
================================================================================

18. POST /categorias
Descripci√≥n: Crear nueva categor√≠a (admin/vendedor).
Body:
{
  "nombre": "Electr√≥nicos",
  "descripcion": "Productos electr√≥nicos y tecnolog√≠a",
  "categoria_padre_id": null
}

19. GET /categorias
Descripci√≥n: Listar todas las categor√≠as con jerarqu√≠a.

20. GET /categorias/padres
Descripci√≥n: Listar solo categor√≠as padre.

21. GET /categorias/{categoria_id}
Descripci√≥n: Obtener categor√≠a espec√≠fica con subcategor√≠as.

22. PUT /categorias/{categoria_id}
Descripci√≥n: Actualizar categor√≠a (admin/vendedor).
Body:
{
  "nombre": "Electr√≥nicos Actualizados",
  "descripcion": "Nueva descripci√≥n"
}

23. DELETE /categorias/{categoria_id}
Descripci√≥n: Eliminar categor√≠a (solo admin, sin subcategor√≠as).

================================================================================
üõçÔ∏è PRODUCTOS (ACTUALIZADO CON VENDEDOR_ID)
================================================================================

24. POST /productos
Descripci√≥n: Crear nuevo producto (vendedor/admin, NUEVO: requiere vendedor_id).
Body:
{
  "nombre": "iPhone 15 Pro",
  "descripcion": "El √∫ltimo iPhone con caracter√≠sticas avanzadas",
  "precio_base": 1200.00,
  "precio_actual": 1100.00,
  "categoria_id": "uuid_categoria",
  "vendedor_id": "uuid_del_vendedor", // NUEVO: OBLIGATORIO
  "cantidad_stock": 50,
  "url_imagen_principal": "https://ejemplo.com/iphone.jpg",
  "peso_g": 187
}

25. GET /productos
Descripci√≥n: Listar todos los productos con categor√≠a, im√°genes y vendedor.

26. GET /productos/buscar
Descripci√≥n: B√∫squeda avanzada con filtros.
Query Parameters:
?nombre=iphone&categoria_id=uuid&vendedor_id=uuid&precio_min=1000&precio_max=1500&esta_activo=true&limit=20&offset=0

27. GET /productos/{producto_id}
Descripci√≥n: Obtener producto espec√≠fico con detalles completos.

28. PUT /productos/{producto_id}
Descripci√≥n: Actualizar producto (solo vendedor propietario o admin).
Body:
{
  "nombre": "iPhone 15 Pro Max",
  "precio_actual": 1200.00,
  "cantidad_stock": 75
}

29. DELETE /productos/{producto_id}
Descripci√≥n: Eliminar producto (solo vendedor propietario o admin).

30. PUT /productos/{producto_id}/stock
Descripci√≥n: Actualizar stock (solo vendedor propietario o admin).
Body:
{
  "cantidad": 10
}

================================================================================
üñºÔ∏è GESTI√ìN DE IM√ÅGENES DE PRODUCTOS
================================================================================

31. POST /productos/{producto_id}/imagenes
Descripci√≥n: Agregar imagen a producto (solo vendedor propietario o admin).
Body:
{
  "url_imagen": "https://ejemplo.com/imagen1.jpg",
  "orden_indice": 1
}

32. GET /productos/{producto_id}/imagenes
Descripci√≥n: Listar im√°genes de un producto.

33. DELETE /productos/imagenes/{imagen_id}
Descripci√≥n: Eliminar imagen (solo vendedor propietario o admin).

================================================================================
üõí CARRITO DE COMPRAS
================================================================================

34. POST /carrito/calcular
Descripci√≥n: Calcular totales del carrito.
Headers: Authorization: Bearer jwt_token
Body:
{
  "items": [
    {
      "producto_id": "uuid_del_producto",
      "cantidad": 2
    }
  ]
}

35. POST /carrito/validar-stock
Descripci√≥n: Validar disponibilidad de stock.
Headers: Authorization: Bearer jwt_token
Body:
{
  "items": [
    {
      "producto_id": "uuid_del_producto",
      "cantidad": 2
    }
  ]
}

36. GET /carrito/calcular-envio?subtotal=200&zona_id=uuid
Descripci√≥n: Calcular costo de env√≠o.
Headers: Authorization: Bearer jwt_token

37. GET /carrito/calcular-descuentos?subtotal=200&codigo_descuento=DESCUENTO10
Descripci√≥n: Calcular descuentos aplicables.
Headers: Authorization: Bearer jwt_token

38. POST /carrito/resumen-completo
Descripci√≥n: Resumen completo del carrito con env√≠o y descuentos.
Headers: Authorization: Bearer jwt_token
Body:
{
  "items": [
    {
      "producto_id": "uuid_del_producto",
      "cantidad": 2
    }
  ],
  "zona_id": "uuid_de_la_zona",
  "codigo_descuento": "DESCUENTO10"
}

================================================================================
üì¶ PEDIDOS
================================================================================

39. POST /pedidos
Descripci√≥n: Crear nuevo pedido (comprador).
Headers: Authorization: Bearer jwt_token
Body:
{
  "comprador_id": "uuid_del_comprador",
  "vendedor_id": "uuid_del_vendedor",
  "direccion_entrega_id": "uuid_de_la_direccion",
  "costo_envio": 15.50,
  "monto_descuento": 10.00,
  "notas_comprador": "Entregar en la puerta principal",
  "whatsapp_pedido_id": "wa_123456",
  "items": [
    {
      "producto_id": "uuid_del_producto",
      "cantidad": 2
    }
  ]
}

40. GET /pedidos
Descripci√≥n: Listar todos los pedidos (solo admin).

41. GET /pedidos/mis-pedidos
Descripci√≥n: Listar pedidos del usuario autenticado (comprador).
Headers: Authorization: Bearer jwt_token

42. GET /pedidos/vendedor/{vendedor_id}
Descripci√≥n: Listar pedidos de un vendedor espec√≠fico (solo vendedor propietario o admin).
Headers: Authorization: Bearer jwt_token

43. GET /pedidos/{pedido_id}
Descripci√≥n: Obtener pedido espec√≠fico con detalles completos.
Headers: Authorization: Bearer jwt_token

44. PUT /pedidos/{pedido_id}/estado
Descripci√≥n: Cambiar estado del pedido (solo vendedor o admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "estado": "confirmado",
  "notas_vendedor": "Pedido confirmado, en preparaci√≥n",
  "hora_estimada_entrega": "2024-01-01T18:00:00Z"
}
Estados v√°lidos: pendiente, confirmado, en_preparacion, en_ruta, entregado, cancelado, reembolsado

45. DELETE /pedidos/{pedido_id}
Descripci√≥n: Eliminar pedido (solo pendientes, comprador o admin).
Headers: Authorization: Bearer jwt_token

================================================================================
üí≥ PAGOS
================================================================================

46. POST /pagos
Descripci√≥n: Registrar pago para pedido (admin/sistema).
Headers: Authorization: Bearer jwt_token
Body:
{
  "pedido_id": "uuid_del_pedido",
  "transaccion_id": "txn_123456789",
  "monto": 205.50,
  "moneda": "BOB",
  "metodo_pago": "codigo_qr",
  "estado": "completado",
  "procesado_por": "Sistema Autom√°tico",
  "notas": "Pago procesado exitosamente"
}
M√©todos v√°lidos: codigo_qr, transferencia_bancaria, efectivo_contra_entrega, tarjeta, billetera_movil

47. GET /pagos
Descripci√≥n: Listar todos los pagos (admin).

48. GET /pagos/{pago_id}
Descripci√≥n: Obtener pago espec√≠fico (admin).

49. GET /pagos/pedido/{pedido_id}
Descripci√≥n: Obtener pago de pedido espec√≠fico.

50. PUT /pagos/{pago_id}/estado
Descripci√≥n: Actualizar estado del pago (admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "estado": "completado"
}

51. GET /pagos/estado/{estado}
Descripci√≥n: Listar pagos por estado (admin).

52. GET /pagos/metodo/{metodo_pago}
Descripci√≥n: Listar pagos por m√©todo (admin).

================================================================================
‚≠ê RESE√ëAS Y CALIFICACIONES
================================================================================

53. POST /resenas
Descripci√≥n: Crear rese√±a (solo comprador del pedido).
Headers: Authorization: Bearer jwt_token
Body:
{
  "pedido_id": "uuid_del_pedido",
  "comprador_id": "uuid_del_comprador",
  "vendedor_id": "uuid_del_vendedor",
  "calificacion": 5,
  "comentario": "Excelente servicio y productos de calidad"
}

54. GET /resenas
Descripci√≥n: Listar todas las rese√±as.

55. GET /resenas/buscar
Descripci√≥n: Buscar rese√±as con filtros.
Query Params: vendedor_id, comprador_id, calificacion, limit, offset

56. GET /resenas/vendedor/{vendedor_id}
Descripci√≥n: Listar rese√±as de vendedor espec√≠fico.

57. GET /resenas/comprador/{comprador_id}
Descripci√≥n: Listar rese√±as de comprador (solo propio o admin).

58. GET /resenas/pendientes/{comprador_id}
Descripci√≥n: Listar pedidos entregados sin rese√±a (solo propio o admin).

59. GET /resenas/{resena_id}
Descripci√≥n: Obtener rese√±a por ID.

60. PUT /resenas/{resena_id}/responder
Descripci√≥n: Responder rese√±a (solo vendedor o admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "respuesta_vendedor": "Gracias por tu comentario, nos esforzamos por dar el mejor servicio"
}

61. PUT /resenas/{resena_id}
Descripci√≥n: Actualizar rese√±a (solo comprador o admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "calificacion": 4,
  "comentario": "Muy buen servicio, actualizado mi comentario"
}

62. DELETE /resenas/{resena_id}
Descripci√≥n: Eliminar rese√±a (solo comprador o admin).
Headers: Authorization: Bearer jwt_token

================================================================================
üí¨ CHAT EN TIEMPO REAL
================================================================================

63. POST /conversaciones
Descripci√≥n: Crear conversaci√≥n (requiere JWT).
Headers: Authorization: Bearer jwt_token
Body:
{
  "pedido_id": "uuid_del_pedido",
  "tipo_conversacion": "directa",
  "participantes": ["uuid_usuario1", "uuid_usuario2"]
}

64. GET /conversaciones
Descripci√≥n: Listar conversaciones del usuario autenticado.
Headers: Authorization: Bearer jwt_token

65. GET /conversaciones/buscar
Descripci√≥n: Buscar conversaciones con filtros.
Headers: Authorization: Bearer jwt_token
Query Params: pedido_id, tipo_conversacion, estado, limit, offset

66. GET /conversaciones/usuario/{usuario_id}
Descripci√≥n: Listar conversaciones de usuario (solo propio o admin).
Headers: Authorization: Bearer jwt_token

67. GET /conversaciones/{conversacion_id}
Descripci√≥n: Obtener conversaci√≥n por ID.
Headers: Authorization: Bearer jwt_token

68. PUT /conversaciones/{conversacion_id}/estado
Descripci√≥n: Cambiar estado de conversaci√≥n.
Headers: Authorization: Bearer jwt_token
Body:
{
  "estado": "archivada"
}

69. POST /conversaciones/{conversacion_id}/participantes
Descripci√≥n: Agregar participante a conversaci√≥n.
Headers: Authorization: Bearer jwt_token
Body:
{
  "usuario_id": "uuid_del_usuario"
}

70. DELETE /conversaciones/{conversacion_id}/participantes/{usuario_id}
Descripci√≥n: Remover participante de conversaci√≥n.
Headers: Authorization: Bearer jwt_token

71. POST /mensajes
Descripci√≥n: Crear mensaje.
Headers: Authorization: Bearer jwt_token
Body:
{
  "conversacion_id": "uuid_de_la_conversacion",
  "contenido": "Hola, ¬øc√≥mo est√°s?",
  "tipo_mensaje": "texto",
  "url_archivo": "https://ejemplo.com/imagen.jpg"
}

72. GET /mensajes/conversacion/{conversacion_id}
Descripci√≥n: Listar mensajes de conversaci√≥n.
Headers: Authorization: Bearer jwt_token

73. GET /mensajes/{mensaje_id}
Descripci√≥n: Obtener mensaje por ID.
Headers: Authorization: Bearer jwt_token

74. PUT /mensajes/conversacion/{conversacion_id}/leer
Descripci√≥n: Marcar mensajes como le√≠dos.
Headers: Authorization: Bearer jwt_token

75. GET /mensajes/usuario/{usuario_id}/no-leidos
Descripci√≥n: Obtener mensajes no le√≠dos (solo propio o admin).
Headers: Authorization: Bearer jwt_token

76. DELETE /mensajes/{mensaje_id}
Descripci√≥n: Eliminar mensaje (solo remitente).
Headers: Authorization: Bearer jwt_token

================================================================================
üöö ZONAS DE ENTREGA
================================================================================

77. POST /zonas
Descripci√≥n: Crear zona de entrega (admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "nombre": "Zona Centro",
  "descripcion": "Zona del centro de la ciudad",
  "coordenadas_poligono": "{\"type\":\"Polygon\",\"coordinates\":[[[...]]]}",
  "tarifa_envio": 15.00,
  "esta_activa": true
}

78. GET /zonas
Descripci√≥n: Listar todas las zonas de entrega.

79. GET /zonas/activas
Descripci√≥n: Listar solo zonas activas.

80. GET /zonas/{zona_id}
Descripci√≥n: Obtener zona por ID.

81. PUT /zonas/{zona_id}
Descripci√≥n: Actualizar zona de entrega (admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "nombre": "Zona Centro Actualizada",
  "tarifa_envio": 20.00
}

82. DELETE /zonas/{zona_id}
Descripci√≥n: Eliminar zona de entrega (admin).
Headers: Authorization: Bearer jwt_token

83. POST /zonas/calcular-tarifa
Descripci√≥n: Calcular tarifa de env√≠o autom√°ticamente.
Body:
{
  "latitud_origen": -16.4897,
  "longitud_origen": -68.1193,
  "latitud_destino": -16.5000,
  "longitud_destino": -68.1300,
  "peso_total_g": 1500,
  "zona_id": "uuid_de_la_zona"
}

84. POST /zonas/vendedores/{vendedor_id}/asignar-zona
Descripci√≥n: Asignar vendedor a zona (admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "zona_id": "uuid_de_la_zona"
}

85. DELETE /zonas/vendedores/{vendedor_id}/asignar-zona
Descripci√≥n: Remover vendedor de zona (admin).
Headers: Authorization: Bearer jwt_token

86. GET /zonas/{zona_id}/vendedores
Descripci√≥n: Listar vendedores asignados a zona.

87. POST /zonas/vendedores/{vendedor_id}/optimizar-ruta
Descripci√≥n: Optimizar ruta para vendedor (admin).
Headers: Authorization: Bearer jwt_token
Body:
{
  "pedidos_ids": ["uuid_pedido1", "uuid_pedido2", "uuid_pedido3"]
}

88. GET /zonas/buscar-por-coordenadas
Descripci√≥n: Encontrar zona por coordenadas.
Query Params: latitud, longitud

================================================================================
üîå WEBSOCKET EVENTS - CHAT Y UBICACI√ìN
================================================================================

Conexi√≥n:
const socket = io('https://proyect-mercado-backend.fly.dev', {
  auth: {
    token: 'jwt_token',
    usuario_id: 'uuid_del_usuario'
  }
});
# üÜï NUEVAS APIS AGREGADAS - SISTEMA COMPLETO
# üìö APIs adicionales que complementan el archivo apis.txt

================================================================================
üîê SISTEMA DE VALIDACI√ìN DE VENDEDORES (CR√çTICO)
================================================================================

89. POST /admin/vendedores/validar
Descripci√≥n: Admin valida vendedor (NUEVA API CR√çTICA).
Headers: Authorization: Bearer jwt_token
Body:
{
  "vendedor_id": "uuid_del_vendedor",
  "estado": "aprobado|rechazado|suspendido",
  "motivo_rechazo": "Documentos incompletos",
  "notas_admin": "Aprobado despu√©s de verificaci√≥n",
  "admin_id": "uuid_del_admin"
}
Respuesta:
{
  "mensaje": "Vendedor validado correctamente",
  "vendedor": { /* datos del vendedor actualizado */ }
}

90. GET /admin/vendedores/pendientes
Descripci√≥n: Listar vendedores pendientes de validaci√≥n (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "vendedores": [/* vendedores pendientes con datos de usuario */]
}

91. GET /admin/vendedores/estadisticas
Descripci√≥n: Estad√≠sticas de validaci√≥n de vendedores (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "estadisticas": {
    "total_vendedores": 150,
    "pendientes": 25,
    "aprobados": 120,
    "rechazados": 3,
    "suspendidos": 2
  }
}

================================================================================
üë§ APIS PARA COMPRADORES (NUEVAS FUNCIONALIDADES)
================================================================================

92. GET /compradores/{usuario_id}/historial-compras
Descripci√≥n: Historial de compras con filtros (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters:
?estado=entregado&fecha_desde=2024-01-01&fecha_hasta=2024-01-31&limit=20&offset=0
Respuesta:
{
  "pedidos": [/* pedidos del comprador */],
  "total": 45
}

93. POST /compradores/favoritos
Descripci√≥n: Agregar producto a favoritos (NUEVA API).
Headers: Authorization: Bearer jwt_token
Body:
{
  "usuario_id": "uuid_del_usuario",
  "producto_id": "uuid_del_producto"
}

94. GET /compradores/{usuario_id}/favoritos
Descripci√≥n: Listar productos favoritos (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "favoritos": [/* productos favoritos con detalles */]
}

95. DELETE /compradores/{usuario_id}/favoritos/{producto_id}
Descripci√≥n: Eliminar producto de favoritos (NUEVA API).
Headers: Authorization: Bearer jwt_token

96. GET /compradores/{usuario_id}/favoritos/verificar/{producto_id}
Descripci√≥n: Verificar si producto est√° en favoritos (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "es_favorito": true
}

97. GET /compradores/{usuario_id}/notificaciones
Descripci√≥n: Listar notificaciones del usuario (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters:
?es_leida=false&tipo=pedido_nuevo&limit=20&offset=0
Respuesta:
{
  "notificaciones": [/* notificaciones del usuario */],
  "total": 15
}

98. PUT /compradores/notificaciones/{notificacion_id}/leer
Descripci√≥n: Marcar notificaci√≥n como le√≠da (NUEVA API).
Headers: Authorization: Bearer jwt_token

99. PUT /compradores/{usuario_id}/notificaciones/todas-leidas
Descripci√≥n: Marcar todas las notificaciones como le√≠das (NUEVA API).
Headers: Authorization: Bearer jwt_token

100. GET /compradores/{usuario_id}/notificaciones/contador
Descripci√≥n: Contador de notificaciones no le√≠das (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "notificaciones_no_leidas": 7
}

101. POST /compradores/codigos-descuento/validar
Descripci√≥n: Validar c√≥digo de descuento (NUEVA API).
Headers: Authorization: Bearer jwt_token
Body:
{
  "codigo": "DESCUENTO10",
  "monto_subtotal": 200.00,
  "categoria_id": "uuid_categoria" // opcional
}
Respuesta:
{
  "valido": true,
  "codigo_descuento": { /* datos del c√≥digo */ },
  "monto_descuento": 20.00
}

102. GET /compradores/{usuario_id}/seguimiento-pedido/{pedido_id}
Descripci√≥n: Seguimiento detallado de pedido (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "pedido": { /* datos del pedido */ },
  "tiempo_estimado": "15 minutos",
  "estado_detallado": "Pedido confirmado, en preparaci√≥n"
}

103. GET /compradores/{usuario_id}/estadisticas
Descripci√≥n: Estad√≠sticas del comprador (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "total_pedidos": 25,
  "pedidos_entregados": 22,
  "total_gastado": 3500.00,
  "productos_favoritos": 8,
  "notificaciones_no_leidas": 3
}

================================================================================
üëë APIS PARA ADMINISTRADORES (NUEVAS FUNCIONALIDADES)
================================================================================

104. GET /admin/dashboard
Descripci√≥n: Dashboard administrativo completo (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "dashboard": {
    "total_usuarios": 1250,
    "total_productos": 850,
    "total_pedidos": 3200,
    "total_ventas": 125000.00,
    "pedidos_hoy": 45,
    "ventas_hoy": 2500.00,
    "ventas_mes": 65000.00,
    "productos_pendientes": 12
  }
}

105. GET /admin/usuarios
Descripci√≥n: Listar usuarios con filtros (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters:
?rol=vendedor&esta_activo=true&limit=20&offset=0
Respuesta:
{
  "usuarios": [/* usuarios con filtros */],
  "total": 150
}

106. PUT /admin/usuarios/{usuario_id}/estado
Descripci√≥n: Cambiar estado de usuario (NUEVA API).
Headers: Authorization: Bearer jwt_token
Body:
{
  "esta_activo": false
}

107. POST /admin/codigos-descuento
Descripci√≥n: Crear c√≥digo de descuento (NUEVA API).
Headers: Authorization: Bearer jwt_token
Body:
{
  "codigo": "DESCUENTO20",
  "descripcion": "20% de descuento en electr√≥nicos",
  "porcentaje_descuento": 20.00,
  "monto_minimo": 100.00,
  "usos_maximos": 100,
  "fecha_inicio": "2024-01-01T00:00:00Z",
  "fecha_fin": "2024-12-31T23:59:59Z",
  "categoria_id": "uuid_electronicos"
}

108. GET /admin/codigos-descuento
Descripci√≥n: Listar c√≥digos de descuento (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "codigos": [/* c√≥digos de descuento */]
}

109. PUT /admin/codigos-descuento/{codigo_id}
Descripci√≥n: Actualizar c√≥digo de descuento (NUEVA API).
Headers: Authorization: Bearer jwt_token
Body:
{
  "porcentaje_descuento": 25.00,
  "esta_activo": false
}

110. DELETE /admin/codigos-descuento/{codigo_id}
Descripci√≥n: Eliminar c√≥digo de descuento (NUEVA API).
Headers: Authorization: Bearer jwt_token

111. GET /admin/reportes/ventas
Descripci√≥n: Reporte de ventas por per√≠odo (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters:
?fecha_inicio=2024-01-01&fecha_fin=2024-01-31
Respuesta:
{
  "reporte": {
    "fecha_inicio": "2024-01-01",
    "fecha_fin": "2024-01-31",
    "total_ventas": 45000.00,
    "total_pedidos": 320,
    "ventas_por_dia": [/* ventas diarias */],
    "promedio_por_pedido": 140.63
  }
}

112. GET /admin/reportes/productos
Descripci√≥n: Reporte de productos (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "reporte": {
    "total_productos": 850,
    "productos_activos": 780,
    "productos_sin_stock": 70,
    "productos_por_categoria": [/* productos por categor√≠a */],
    "productos_por_vendedor": [/* productos por vendedor */]
  }
}

113. POST /admin/notificaciones/sistema
Descripci√≥n: Enviar notificaci√≥n del sistema (NUEVA API).
Headers: Authorization: Bearer jwt_token
Body:
{
  "usuario_id": "uuid_del_usuario",
  "titulo": "Mantenimiento programado",
  "mensaje": "El sistema estar√° en mantenimiento ma√±ana de 2:00 a 4:00 AM",
  "url_redireccion": "https://ejemplo.com/mantenimiento"
}

================================================================================
üè™ APIS ADICIONALES PARA VENDEDORES
================================================================================

114. GET /vendedores/{vendedor_id}/reportes/ventas
Descripci√≥n: Reporte detallado de ventas del vendedor (NUEVA API).
Headers: Authorization: Bearer jwt_token
Query Parameters:
?fecha_inicio=2024-01-01&fecha_fin=2024-01-31
Respuesta:
{
  "reporte": {
    "periodo": "Enero 2024",
    "total_ventas": 15000.00,
    "total_pedidos": 85,
    "productos_mas_vendidos": [/* productos */],
    "ventas_por_dia": [/* ventas diarias */]
  }
}

115. GET /vendedores/{vendedor_id}/inventario
Descripci√≥n: Gesti√≥n de inventario avanzada (NUEVA API).
Headers: Authorization: Bearer jwt_token
Respuesta:
{
  "inventario": {
    "total_productos": 25,
    "productos_bajo_stock": 5,
    "productos_sin_stock": 2,
    "valor_total_inventario": 12500.00,
    "productos": [/* productos con stock */]
  }
}

================================================================================
üîí SISTEMA DE ROLES Y PERMISOS
================================================================================

Guards implementados:
- JwtAuthGuard: Verifica token JWT
- RolesGuard: Verifica roles de usuario

Decorators disponibles:
- @Roles('admin', 'super_admin'): Restringe acceso por roles
- @UseGuards(JwtAuthGuard, RolesGuard): Aplica guards

Ejemplo de uso:
```typescript
@Controller('admin')
@UseGuards(JwtAuthGuard, RolesGuard)
@Roles('admin', 'super_admin')
export class AdminController {
  // Solo admins pueden acceder
}
```

================================================================================
üìä RESUMEN DE NUEVAS APIS AGREGADAS
================================================================================

TOTAL DE NUEVAS APIS: 27

Por categor√≠a:
- Validaci√≥n de vendedores: 3 APIs
- Compradores: 12 APIs
- Administradores: 10 APIs
- Vendedores: 2 APIs

APIs m√°s importantes:
‚úÖ Sistema de validaci√≥n de vendedores (CR√çTICO)
‚úÖ Dashboard administrativo completo
‚úÖ Sistema de favoritos para compradores
‚úÖ Notificaciones en tiempo real
‚úÖ C√≥digos de descuento
‚úÖ Historial de compras
‚úÖ Reportes detallados
‚úÖ Gesti√≥n de inventario

================================================================================
üéØ TOTAL FINAL DE APIS: 115
================================================================================

Desglose completo:
- APIs originales: 88
- APIs nuevas agregadas: 27
- TOTAL: 115 APIs

El sistema est√° 100% completo y robusto para un marketplace profesional! üöÄ 

Eventos de Chat:
- unirse_conversacion: Unirse a conversaci√≥n
- salir_conversacion: Salir de conversaci√≥n
- enviar_mensaje: Enviar mensaje
- marcar_leido: Marcar mensajes como le√≠dos
- escribiendo: Indicar que est√° escribiendo

Eventos de Ubicaci√≥n:
- ubicacion_actualizada: Actualizar ubicaci√≥n de vendedor

================================================================================
üìã FLUJO COMPLETO DEL VENDEDOR
================================================================================

üè™ **PASO 1: LOGIN Y ACCESO**
1. POST /autenticacion/login (con credenciales de vendedor)
2. GET /usuarios/perfil (verificar rol vendedor)

üè™ **PASO 2: DASHBOARD PRINCIPAL**
3. GET /vendedores/{vendedor_id}/dashboard
   - Contadores de productos
   - Contadores de pedidos por estado
   - Calificaci√≥n promedio
   - Ventas por per√≠odo
   - Mensajes no le√≠dos

üè™ **PASO 3: GESTI√ìN DE PRODUCTOS**
4. GET /vendedores/{vendedor_id}/productos (listar mis productos)
5. POST /productos (agregar nuevo producto)
6. PUT /productos/{producto_id} (editar producto)
7. DELETE /productos/{producto_id} (eliminar producto)
8. PUT /productos/{producto_id}/stock (actualizar stock)

üè™ **PASO 4: GESTI√ìN DE PEDIDOS**
9. GET /vendedores/{vendedor_id}/pedidos (ver todos mis pedidos)
10. GET /vendedores/{vendedor_id}/pedidos?estado=pendiente (pedidos pendientes)
11. GET /pedidos/{pedido_id} (ver detalles del pedido)
12. PUT /pedidos/{pedido_id}/estado (cambiar estado del pedido)

üè™ **PASO 5: COMUNICACI√ìN CON CLIENTES**
13. GET /vendedores/pedidos/{pedido_id}/chat (chat del pedido)
14. POST /mensajes (responder mensajes)
15. PUT /mensajes/conversacion/{conversacion_id}/leer (marcar como le√≠do)

üè™ **PASO 6: GESTI√ìN DE RESE√ëAS**
16. GET /resenas/vendedor/{vendedor_id} (ver rese√±as de mi negocio)
17. PUT /resenas/{resena_id}/responder (responder rese√±as)

üè™ **PASO 7: UBICACI√ìN EN TIEMPO REAL**
18. POST /vendedores/ubicaciones (actualizar ubicaci√≥n)
19. WebSocket: ubicacion_actualizada (ubicaci√≥n en tiempo real)

================================================================================
üìã RESUMEN POR ROLES
================================================================================

üë§ COMPRADOR:
- Registro y login
- Gesti√≥n de perfil y direcciones
- Explorar productos y categor√≠as
- Carrito de compras
- Realizar pedidos
- Ver estado de pedidos
- Crear rese√±as
- Chat con vendedores

üè™ VENDEDOR:
- Todo lo del comprador +
- Conversi√≥n a vendedor
- Dashboard con contadores
- Gesti√≥n de productos propios
- Gesti√≥n de pedidos recibidos
- Actualizar ubicaci√≥n en tiempo real
- Responder rese√±as
- Chat con compradores
- Estad√≠sticas de ventas

üëë ADMIN:
- Todo lo anterior +
- Gesti√≥n completa de usuarios
- Gesti√≥n de categor√≠as
- Gesti√≥n de zonas de entrega
- Asignar vendedores a zonas
- Ver todos los pedidos y pagos
- Optimizaci√≥n de rutas
- Gesti√≥n de rese√±as

ü¶∏ SUPER_ADMIN:
- Todo lo anterior +
- Gesti√≥n de otros admins
- Configuraciones del sistema
- Logs y auditor√≠a

================================================================================
üöÄ DESPLIEGUE Y CONFIGURACI√ìN
================================================================================

URL de Producci√≥n: https://proyect-mercado-backend.fly.dev
URL de WebSocket: wss://proyect-mercado-backend.fly.dev

Headers requeridos para APIs protegidas:
Authorization: Bearer jwt_token
Content-Type: application/json

CORS configurado para:
- http://localhost:3000 (desarrollo)
- https://tienda-proyect.netlify.app (producci√≥n)
- https://*.netlify.app
- https://*.vercel.app

================================================================================
‚úÖ ESTADO DEL PROYECTO: COMPLETADO
================================================================================

Todas las funcionalidades implementadas:
‚úÖ Usuarios y autenticaci√≥n
‚úÖ Conversi√≥n a vendedor
‚úÖ Panel completo del vendedor con dashboard
‚úÖ Productos con relaci√≥n a vendedores
‚úÖ Categor√≠as jer√°rquicas
‚úÖ Pedidos y pagos
‚úÖ Carrito de compras
‚úÖ Rese√±as y calificaciones
‚úÖ Chat en tiempo real
‚úÖ Zonas de entrega
‚úÖ Ubicaci√≥n GPS en tiempo real
‚úÖ CORS configurado
‚úÖ Desplegado en Fly.io

================================================================================
üéØ APIS ESPEC√çFICAS PARA EL PANEL DEL VENDEDOR: 88 TOTAL
================================================================================

